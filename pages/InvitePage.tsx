
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import Card from '../components/ui/Card';
import Modal from '../components/ui/Modal';
import TelegramContactsImport from '../components/TelegramContactsImport';
import type { Friend } from '../types';
import { getImagePropsSafe } from '../utils/imageUtils';

interface InvitePageProps {
    onFriendsChange: (friends: Friend[], action: 'add') => void;
    existingFriends?: Friend[];
}

// Mock potential friends found in contacts
const MOCK_FOUND_FRIENDS: Friend[] = [
    { id: 'f12', name: '–°–µ—Ä–≥–µ–π –í–æ–ª–∫–æ–≤', avatarUrl: 'https://i.pravatar.cc/150?u=f12', source: 'contacts' },
    { id: 'f13', name: '–ú–∞—Ä–∏—è –ó–∞–π—Ü–µ–≤–∞', avatarUrl: 'https://i.pravatar.cc/150?u=f13', source: 'contacts' },
    { id: 'f14', name: '–ê–ª–µ–∫—Å–µ–π –ú–æ—Ä–æ–∑–æ–≤', avatarUrl: 'https://i.pravatar.cc/150?u=f14', source: 'contacts' },
];

const InvitePage: React.FC<InvitePageProps> = ({ onFriendsChange, existingFriends = [] }) => {
    const [view, setView] = useState<'options' | 'link' | 'contacts' | 'contacts-found' | 'telegram'>('options');
    const [linkCopied, setLinkCopied] = useState(false);
    const [contactsAdded, setContactsAdded] = useState(false);
    const [showTelegramModal, setShowTelegramModal] = useState(false);
    const inviteLink = "https://ostrovok.ru/invite/aBcDeFg123";

    const copyLink = () => {
        navigator.clipboard.writeText(inviteLink).then(() => {
            setLinkCopied(true);
            setTimeout(() => setLinkCopied(false), 2000);
        });
    };

    const handleAddContacts = () => {
        onFriendsChange(MOCK_FOUND_FRIENDS, 'add');
        setContactsAdded(true);
    };

    const handleTelegramContactsImported = (friends: Friend[]) => {
        onFriendsChange(friends, 'add');
        setShowTelegramModal(false);
    };

    const renderContent = () => {
        switch (view) {
            case 'options':
                return (
                    <>
                        <h1 className="text-3xl font-bold text-slate-900">–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π</h1>
                        <p className="mt-2 text-slate-600 max-w-md mx-auto">–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±, –∫–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.</p>
                        <div className="mt-8 grid grid-cols-1 sm:grid-cols-2 gap-4">
                            <button onClick={() => setView('link')} className="p-6 border-2 border-slate-200 rounded-lg hover:border-cyan-500 hover:bg-cyan-50 transition-colors">
                                <h2 className="font-semibold text-lg">üîó –í–æ–ª—à–µ–±–Ω–∞—è —Å—Å—ã–ª–∫–∞</h2>
                                <p className="text-sm text-slate-500 mt-1">–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º.</p>
                            </button>
                            <button onClick={() => setView('contacts')} className="p-6 border-2 border-slate-200 rounded-lg hover:border-cyan-500 hover:bg-cyan-50 transition-colors">
                                <h2 className="font-semibold text-lg">üë• –ö–æ–Ω—Ç–∞–∫—Ç—ã —Ç–µ–ª–µ—Ñ–æ–Ω–∞</h2>
                                <p className="text-sm text-slate-500 mt-1">–ù–∞–π–¥–∏—Ç–µ, –∫—Ç–æ —É–∂–µ –µ—Å—Ç—å –Ω–∞ –û—Å—Ç—Ä–æ–≤–∫–µ.</p>
                            </button>
                            <button onClick={() => setShowTelegramModal(true)} className="p-6 border-2 border-slate-200 rounded-lg hover:border-cyan-500 hover:bg-cyan-50 transition-colors sm:col-span-2">
                                <h2 className="font-semibold text-lg">üì± –ò–º–ø–æ—Ä—Ç –∏–∑ Telegram</h2>
                                <p className="text-sm text-slate-500 mt-1">–ù–∞–π–¥–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏–∑ –≤–∞—à–µ–≥–æ Telegram.</p>
                            </button>
                        </div>
                    </>
                );
            case 'link':
                return (
                    <>
                        <h1 className="text-2xl font-bold text-slate-900">–í–æ–ª—à–µ–±–Ω–∞—è —Å—Å—ã–ª–∫–∞</h1>
                        <p className="mt-2 text-slate-600 max-w-md mx-auto">–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º. –ö–æ–≥–¥–∞ –æ–Ω–∏ –ø–µ—Ä–µ–π–¥—É—Ç –ø–æ –Ω–µ–π, –≤—ã –Ω–∞—á–Ω–µ—Ç–µ –≤–∏–¥–µ—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞.</p>
                        <div className="mt-8">
                            <input readOnly value={inviteLink} className="w-full bg-slate-100 border-2 border-slate-200 rounded-lg py-3 px-4 text-slate-700 text-center" />
                        </div>
                        <div className="mt-4 flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-4 justify-center">
                            <button onClick={copyLink} className="w-full sm:w-auto flex-1 px-6 py-3 bg-cyan-600 text-white font-semibold rounded-lg shadow-md hover:bg-cyan-700 transition-colors">{linkCopied ? '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!' : '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å'}</button>
                            <a href={`https://t.me/share/url?url=${inviteLink}&text=...`} target="_blank" rel="noopener noreferrer" className="w-full sm:w-auto flex-1 flex items-center justify-center px-6 py-3 bg-sky-500 text-white font-semibold rounded-lg shadow-md hover:bg-sky-600 transition-colors">–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram</a>
                        </div>
                    </>
                );
            case 'contacts':
                return (
                    <>
                        <h1 className="text-2xl font-bold text-slate-900">–ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤</h1>
                        <p className="mt-2 text-slate-600 max-w-md mx-auto">–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –û—Å—Ç—Ä–æ–≤–æ–∫.</p>
                        <p className="mt-4 text-xs text-slate-400">–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –±–∞–∑–µ –û—Å—Ç—Ä–æ–≤–∫–∞ –∏ –Ω–∏–∫–æ–º—É –Ω–µ –±—É–¥–µ–º –∑–≤–æ–Ω–∏—Ç—å –∏–ª–∏ –ø–∏—Å–∞—Ç—å. –î–∞–Ω–Ω—ã–µ –Ω–∞–¥–µ–∂–Ω–æ –∑–∞—â–∏—â–µ–Ω—ã.</p>
                        <button onClick={() => setTimeout(() => setView('contacts-found'), 1500)} className="mt-6 w-full px-6 py-3 bg-cyan-600 text-white font-semibold rounded-lg shadow-md hover:bg-cyan-700">
                            –†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø
                        </button>
                    </>
                );
            case 'contacts-found':
                return (
                    <>
                        <h1 className="text-2xl font-bold text-slate-900">–ù–∞–π–¥–µ–Ω–æ {MOCK_FOUND_FRIENDS.length} –¥—Ä—É–≥–∞!</h1>
                        <p className="mt-2 text-slate-600">–≠—Ç–∏ –ª—é–¥–∏ –∏–∑ –≤–∞—à–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —É–∂–µ –µ—Å—Ç—å –Ω–∞ –û—Å—Ç—Ä–æ–≤–∫–µ.</p>
                        <div className="mt-6 space-y-3">
                            {MOCK_FOUND_FRIENDS.map(friend => (
                                <div key={friend.id} className="flex items-center justify-between p-2 bg-slate-50 rounded-lg">
                                    <div className="flex items-center">
                                        <img
                                            className="w-10 h-10 rounded-full"
                                            {...getImagePropsSafe(friend.avatarUrl, friend.name)}
                                        />
                                        <p className="ml-3 font-medium">{friend.name}</p>
                                    </div>
                                </div>
                            ))}
                        </div>
                        <button onClick={handleAddContacts} disabled={contactsAdded} className="mt-6 w-full px-6 py-3 bg-cyan-600 text-white font-semibold rounded-lg shadow-md hover:bg-cyan-700 disabled:bg-slate-400">
                            {contactsAdded ? '–î–æ–±–∞–≤–ª–µ–Ω—ã!' : '–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ—Ö'}
                        </button>
                    </>
                );
        }
    }

    return (
        <div>
            <div className="mb-6">
                <Link to={view === 'options' ? "/friends" : ''} onClick={() => view !== 'options' && setView('options')} className="inline-flex items-center text-cyan-600 hover:text-cyan-800 transition-colors font-medium">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
                    </svg>
                    {view === 'options' ? '–ù–∞–∑–∞–¥ –∫ –¥—Ä—É–∑—å—è–º' : '–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É'}
                </Link>
            </div>
            <Card className="max-w-2xl mx-auto">
                <div className="p-8 text-center">
                    {renderContent()}
                </div>
            </Card>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ Telegram */}
            <Modal
                isOpen={showTelegramModal}
                onClose={() => setShowTelegramModal(false)}
                title="–ò–º–ø–æ—Ä—Ç –¥—Ä—É–∑–µ–π –∏–∑ Telegram"
            >
                <TelegramContactsImport
                    onContactsImported={handleTelegramContactsImported}
                    onClose={() => setShowTelegramModal(false)}
                    existingFriends={existingFriends}
                />
            </Modal>
        </div>
    );
};

export default InvitePage;
